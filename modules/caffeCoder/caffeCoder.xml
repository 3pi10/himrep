<?xml version="1.0" encoding="ISO-8859-1"?>
<?xml-stylesheet type="text/xsl" href="yarpmanifest.xsl"?>

<module>

   <name>caffeCoder</name>
   <doxygen-group>icub_module</doxygen-group>
   <description>The module computes a representation of the input image using Caffe library.</description>
   <copypolicy>Released under the terms of the GNU GPL v2.0</copypolicy>
   <version>1.0</version>

   <description-long>

    @subsection sec-intro Introduction

    The input image is passed through a feed-forward Convolutional Network model (that must have been previously learned). The image representation can be extracted as the output of any layer in the network.
    Usually the latest convolutional layer is chosen and the output is a 1-dim vector, than is then fed to a classifier (e.g., linear SVM/RLS).

    @subsection sec-details More stuff

    This is a detailed description, etc.

    </description-long>

    <arguments>
    <param default="caffeCoder" desc="name of the module"> name </param>
    <param default="caffeCoder.ini" desc="configuration file name"> from </param>
    <param default="himrep" desc="select the current context"> context </param>

    <param default="$Caffe_ROOT/models/bvlc_reference_caffenet/bvlc_reference_caffenet.caffemodel" desc="Absolute path to the .caffemodel file"> pretrained_binary_proto_file </param>
    <param default="imagenet_val_cutfc6.prototxt" desc="File name of the .prototxt file. It must contain the definition of the network used"> feature_extraction_proto_file </param>
    <param default="fc6" desc="Tag (see the .prototxt) of the layer at which we want to extract the features"> extract_features_blob_names </param>
    <param default="GPU" desc="[GPU|gpu|CPU|cpu] passed to Caffe initialization"> compute_mode </param>
    <param default="0" desc="GPU device chosen by Caffe to run the computations (used if compute_mode is set to GPU)"> device_id </param>
    <param default="false" desc="[true|false] depending on whether you desire to read in the stdout the time to extract the features"> timing </param>

    </arguments>

    <authors>
        <author email="giulia.pasquale@iit.it"> Giulia Pasquale </author>
    </authors>

    <data>
        <input>
            <type>Image</type>
            <port carrier="udp">/caffeCoder/img:i</port>
            <required>yes</required>
            <priority>yes</priority>
            <description>Feed images to caffeCoder using this port.</description>
        </input>

         <output>
            <type>Image</type>
            <port carrier="udp">/caffeCoder/img:o</port>
            <description>Output image (equal to the input).</description>
        </output>

        <output>
            <type>Vector</type>
            <port carrier="tcp">/caffeCoder/code:o</port>
            <description>
                Output vectorial representation of the image.
            </description>
        </output>
    </data>

    <services>
         <server>
            <type>Port</type>
            <port>/caffeCoder/rpc</port>
            <description>Command port</description>
        </server>
    </services>
    
</module>
